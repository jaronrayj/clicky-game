{"version":3,"sources":["SingleCard/index.js","Score/index.js","Wrapper/index.js","App.js","serviceWorker.js","index.js"],"names":["SingleCard","props","react_default","a","createElement","Card","Content","className","key","onClick","e","handleClick","data-id","id","Image","src","Score","Menu","fixed","inverted","Container","Item","header","score","hiScore","Wrapper","state","cardChosen","randomOrder","array","shuffle","event","cardId","target","getAttribute","_this","includes","gameOver","push","newScore","setState","alert","_this2","this","Fragment","src_Score","Group","itemsPerRow","images","map","img","src_SingleCard","Label","Component","App","src_Wrapper","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"02BAwBeA,MApBf,SAAoBC,GAEhB,OACIC,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACIH,EAAAC,EAAAC,cAACC,EAAA,EAAKC,QAAN,CACIC,UAAU,MACVC,IAAKP,EAAMO,IACXC,QAAS,SAAAC,GAAC,OAAIT,EAAMU,YAAYD,IAChCE,UAASX,EAAMY,IAGfX,EAAAC,EAAAC,cAACU,EAAA,EAAD,CAAOC,IAAKd,EAAMc,IACdH,UAASX,EAAMY,4CCGpBG,MAhBf,SAAef,GACX,OACIC,EAAAC,EAAAC,cAACa,EAAA,EAAD,CAAMC,MAAM,MAAMC,UAAQ,GACtBjB,EAAAC,EAAAC,cAACgB,EAAA,EAAD,KACIlB,EAAAC,EAAAC,cAACa,EAAA,EAAKI,KAAN,CAAWC,QAAM,GACbpB,EAAAC,EAAAC,cAAA,0BAGJF,EAAAC,EAAAC,cAACa,EAAA,EAAKI,KAAN,eAAmBpB,EAAMsB,OACzBrB,EAAAC,EAAAC,cAACa,EAAA,EAAKI,KAAN,kBAAsBpB,EAAMuB,YC4E7BC,6MA/EXC,MAAQ,CACJH,MAAO,EACPI,WAAY,GACZH,QAAS,KAGbI,YAAc,SAAAC,GAEV,OADiBC,IAAQD,MAI7BlB,YAAc,SAACoB,GACX,IAAIC,EAASD,EAAME,OAAOC,aAAa,WACvC,GAAIC,EAAKT,MAAMC,WAAWS,SAASJ,GAC/BG,EAAKE,eACF,CACHF,EAAKT,MAAMC,WAAWW,KAAKN,GAC3B,IAAIO,EAAWJ,EAAKT,MAAMH,MAAQ,EAC9BY,EAAKT,MAAMF,SAAWW,EAAKT,MAAMH,OACjCY,EAAKK,SAAS,CACVjB,MAAOgB,EACPf,QAASe,IAEY,KAArBJ,EAAKT,MAAMH,QACXkB,MAAM,YACNN,EAAKE,aAGTF,EAAKK,SAAS,CACVjB,MAAOY,EAAKT,MAAMH,MAAQ,QAU1Cc,SAAW,WACPI,MAAM,YACNN,EAAKK,SAAS,CACVb,WAAY,GACZJ,MAAO,6EAON,IAAAmB,EAAAC,KACL,OACIzC,EAAAC,EAAAC,cAAAF,EAAAC,EAAAyC,SAAA,KACI1C,EAAAC,EAAAC,cAACyC,EAAD,CACItB,MAAOoB,KAAKjB,MAAMH,MAClBC,QAASmB,KAAKjB,MAAMF,UACxBtB,EAAAC,EAAAC,cAACgB,EAAA,EAAD,CAAWb,UAAU,WACjBL,EAAAC,EAAAC,cAACC,EAAA,EAAKyC,MAAN,CAAYC,YAAa,GACpBJ,KAAKf,YAAYoB,GAAQC,IAAI,SAAAC,GAAG,OAC7BhD,EAAAC,EAAAC,cAAAF,EAAAC,EAAAyC,SAAA,KACI1C,EAAAC,EAAAC,cAAC+C,EAAD,CACIpC,IAAKmC,EAAIA,IACTvC,YAAa+B,EAAK/B,YAClBE,GAAIqC,EAAIrC,SAIxBX,EAAAC,EAAAC,cAAA,OAAKG,UAAU,UAEXL,EAAAC,EAAAC,cAACgD,EAAA,EAAD,KACIlD,EAAAC,EAAAC,cAAA,wFAvENiD,aCIPC,MARf,WACI,OACIpD,EAAAC,EAAAC,cAAAF,EAAAC,EAAAyC,SAAA,KACI1C,EAAAC,EAAAC,cAACmD,EAAD,QCKQC,QACa,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZRC,IAASC,OAAO5D,EAAAC,EAAAC,cAAC2D,EAAD,MAASC,SAASC,eAAe,SD2HzC,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.4cc578eb.chunk.js","sourcesContent":["import React from 'react'\nimport { Card, Image } from 'semantic-ui-react'\nimport \"./style.css\"\n\nfunction SingleCard(props) {\n\n    return (\n        <Card>\n            <Card.Content\n                className=\"box\"\n                key={props.key}\n                onClick={e => props.handleClick(e)}\n                data-id={props.id}\n            >\n\n                <Image src={props.src}\n                    data-id={props.id} />\n\n            </Card.Content>\n        </Card>\n    )\n\n}\n\nexport default SingleCard;\n\n","import React from 'react';\nimport { Menu, Container } from 'semantic-ui-react'\n\nfunction Score(props) {\n    return (\n        <Menu fixed='top' inverted>\n            <Container>\n                <Menu.Item header>\n                    <h1>Memory Game</h1>\n                </Menu.Item>\n\n                <Menu.Item>Score: {props.score}</Menu.Item>\n                <Menu.Item>Hi Score: {props.hiScore}</Menu.Item>\n            </Container>\n        </Menu>\n\n    )\n}\n\nexport default Score;","import React, { Component } from 'react'\nimport { Container, Card, Label } from \"semantic-ui-react\"\nimport \"./style.css\"\nimport SingleCard from \"../SingleCard\";\nimport shuffle from 'shuffle-array'\nimport images from \"../images.json\"\nimport Score from '../Score'\n\nclass Wrapper extends Component {\n    state = {\n        score: 0,\n        cardChosen: [],\n        hiScore: 0\n    };\n\n    randomOrder = array => {\n        const newArray = shuffle(array);\n        return newArray;\n    }\n\n    handleClick = (event) => {\n        let cardId = event.target.getAttribute(\"data-id\");\n        if (this.state.cardChosen.includes(cardId)) {\n            this.gameOver();\n        } else {\n            this.state.cardChosen.push(cardId);\n            let newScore = this.state.score + 1\n            if (this.state.hiScore <= this.state.score) {\n                this.setState({\n                    score: newScore,\n                    hiScore: newScore\n                });\n                if (this.state.score === 10) {\n                    alert(\"You win!\")\n                    this.gameOver();\n                }\n            } else {\n                this.setState({\n                    score: this.state.score + 1\n                })\n            }\n\n\n        }\n    }\n\n\n\n    gameOver = () => {\n        alert(\"You lose\");\n        this.setState({\n            cardChosen: [],\n            score: 0\n        }\n        );\n    }\n\n\n\n    render() {\n        return (\n            <>\n                <Score\n                    score={this.state.score}\n                    hiScore={this.state.hiScore} />\n                <Container className=\"mainBox\">\n                    <Card.Group itemsPerRow={5}>\n                        {this.randomOrder(images).map(img =>\n                            <>\n                                <SingleCard\n                                    src={img.img}\n                                    handleClick={this.handleClick}\n                                    id={img.id} />\n                            </>\n                        )}\n                    </Card.Group>\n                    <div className=\"center\">\n\n                        <Label>\n                            <h3>Pick an image! Don't pick the same one twice, or else you lose.</h3>\n                        </Label>\n                    </div>\n                </Container>\n            </>\n        )\n    }\n}\n\nexport default Wrapper;","import React from \"react\";\nimport Wrapper from \"./Wrapper\";\n\n\nfunction App() {\n    return (\n        <>\n            <Wrapper />\n        </>\n    )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n      // [::1] is the IPv6 localhost address.\n      window.location.hostname === '[::1]' ||\n      // 127.0.0.1/8 is considered localhost for IPv4.\n      window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n      )\n  );\n  \n  export function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n      // The URL constructor is available in all browsers that support SW.\n      const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n      if (publicUrl.origin !== window.location.origin) {\n        // Our service worker won't work if PUBLIC_URL is on a different origin\n        // from what our page is served on. This might happen if a CDN is used to\n        // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n        return;\n      }\n  \n      window.addEventListener('load', () => {\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n  \n        if (isLocalhost) {\n          // This is running on localhost. Let's check if a service worker still exists or not.\n          checkValidServiceWorker(swUrl, config);\n  \n          // Add some additional logging to localhost, pointing developers to the\n          // service worker/PWA documentation.\n          navigator.serviceWorker.ready.then(() => {\n            console.log(\n              'This web app is being served cache-first by a service ' +\n                'worker. To learn more, visit https://bit.ly/CRA-PWA'\n            );\n          });\n        } else {\n          // Is not localhost. Just register service worker\n          registerValidSW(swUrl, config);\n        }\n      });\n    }\n  }\n  \n  function registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n      .register(swUrl)\n      .then(registration => {\n        registration.onupdatefound = () => {\n          const installingWorker = registration.installing;\n          if (installingWorker == null) {\n            return;\n          }\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === 'installed') {\n              if (navigator.serviceWorker.controller) {\n                // At this point, the updated precached content has been fetched,\n                // but the previous service worker will still serve the older\n                // content until all client tabs are closed.\n                console.log(\n                  'New content is available and will be used when all ' +\n                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                );\n  \n                // Execute callback\n                if (config && config.onUpdate) {\n                  config.onUpdate(registration);\n                }\n              } else {\n                // At this point, everything has been precached.\n                // It's the perfect time to display a\n                // \"Content is cached for offline use.\" message.\n                console.log('Content is cached for offline use.');\n  \n                // Execute callback\n                if (config && config.onSuccess) {\n                  config.onSuccess(registration);\n                }\n              }\n            }\n          };\n        };\n      })\n      .catch(error => {\n        console.error('Error during service worker registration:', error);\n      });\n  }\n  \n  function checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n      .then(response => {\n        // Ensure service worker exists, and that we really are getting a JS file.\n        const contentType = response.headers.get('content-type');\n        if (\n          response.status === 404 ||\n          (contentType != null && contentType.indexOf('javascript') === -1)\n        ) {\n          // No service worker found. Probably a different app. Reload the page.\n          navigator.serviceWorker.ready.then(registration => {\n            registration.unregister().then(() => {\n              window.location.reload();\n            });\n          });\n        } else {\n          // Service worker found. Proceed as normal.\n          registerValidSW(swUrl, config);\n        }\n      })\n      .catch(() => {\n        console.log(\n          'No internet connection found. App is running in offline mode.'\n        );\n      });\n  }\n  \n  export function unregister() {\n    if ('serviceWorker' in navigator) {\n      navigator.serviceWorker.ready.then(registration => {\n        registration.unregister();\n      });\n    }\n  }\n  ","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}